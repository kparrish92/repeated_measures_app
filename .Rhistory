{
power_df = matrix(nrow = 1000, ncol= 9)
for (i in 1:1000) {
sample_df = sampling %>%
sample_n(number_stim) %>%
mutate(df = "sample")
data_tost = rbind(sampling, sample_df)
t_e = TOSTER::dataTOSTtwo(
data = data_tost,
deps = "k",
group = "df",
low_eqbound_d = -0.4,
high_eqbound_d = 0.4,
desc = TRUE,
plots = FALSE)
tost = t_e$tost$asDF
desc = t_e$desc$asDF
power_df[i, 1] = min(tost$`p[1]`, tost$`p[2]`) # p value tost
power_df[i, 2] = tost$`p[0]`# p value t-test
power_df[i, 3] = desc$`m[1]`# mean 1 (actual)
power_df[i, 4] = desc$`m[2]`# mean 2 (sample)
power_df[i, 5] = desc$`sd[1]`# sd 1 (actual)
power_df[i, 6] = desc$`sd[2]`# sd 2 (sample)
power_df[i, 7] = desc$`n[1]`# n1 (actual)
power_df[i, 8] = desc$`n[2]`# n2 (sample)
power_df[i, 9] = i # n2 (sample)
}
return(power_df)
}
ul_dist = data.frame(k = rnorm(n = 100, mean = 50,
sd = 10)) %>%
mutate(df = "sampling")
df = sample_function(ul_dist, 10) %>%
as.data.frame()
df = sample_function(ul_dist, 10) %>%
as.data.frame() %>%
rename("tost" = V1,
"t_test" = V2,
"mean_actual" = V3,
"mean_sample" = V4,
"sd_actual" = V5,
"sd_sample" = V6,
"n_actual" = V7,
"n_sample" = V8,
"iteration" = V9) %>%
mutate(sig_tost = case_when(
tost < .05 ~ 1,
tost > .05 ~ 0,
)) %>%
mutate(sig_ttest = case_when(
t_test < .05 ~ 1,
t_test > .05 ~ 0,
)) %>%
mutate(tost = round(as.numeric(tost), digits = 3)) %>%
mutate(t_test = round(as.numeric(tost), digits = 3)) %>%
mutate(mean_difference = round(as.numeric(mean_actual) -
as.numeric(mean_sample), digits = 3)) %>%
mutate(test_no = rep(1:10, each = 100))
library(tidyverse)
ul_dist = data.frame(k = rnorm(n = 100, mean = 50,
sd = 10)) %>%
mutate(df = "sampling")
df = sample_function(ul_dist, 10) %>%
as.data.frame()
df = sample_function(ul_dist, 10) %>%
as.data.frame() %>%
rename("tost" = V1,
"t_test" = V2,
"mean_actual" = V3,
"mean_sample" = V4,
"sd_actual" = V5,
"sd_sample" = V6,
"n_actual" = V7,
"n_sample" = V8,
"iteration" = V9) %>%
mutate(sig_tost = case_when(
tost < .05 ~ 1,
tost > .05 ~ 0,
)) %>%
mutate(sig_ttest = case_when(
t_test < .05 ~ 1,
t_test > .05 ~ 0,
)) %>%
mutate(tost = round(as.numeric(tost), digits = 3)) %>%
mutate(t_test = round(as.numeric(tost), digits = 3)) %>%
mutate(mean_difference = round(as.numeric(mean_actual) -
as.numeric(mean_sample), digits = 3)) %>%
mutate(test_no = rep(1:10, each = 100))
df %>%
group_by(test_no, n_actual) %>%
summarize(n = sum(sig_tost))
df %>%
group_by(test_no, n_actual) %>%
summarize(n = sum(sig_tost))
c = df %>%
group_by(test_no, n_actual) %>%
summarize(n = sum(sig_tost))
View(c)
## Only run this example in interactive R sessions
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinycssloaders)
library(tidyverse)
## Only run this example in interactive R sessions
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
runApp('gg')
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = "cerulean",  # <--- To use a theme, uncomment this
# "shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = "cyborg",  # <--- To use a theme, uncomment this
# "shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(theme = "cyborg"),
navbarPage( # <--- To use a theme, uncomment this
# "shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = shinythemes::shinytheme("cyborg"),  # <--- To use a theme, uncomment this
# "shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
theme = shinythemes::shinytheme("cyborg"),  # <--- To use a theme, uncomment this
# "shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
runApp('gg')
runApp()
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
runApp('gg')
