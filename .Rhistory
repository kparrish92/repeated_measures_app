titlePanel("Sampling Error Visualization: within subjects"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Choose n",
min = 1,
max = 100,
value = 20)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
data = read.csv(here("data", "data.csv"))
k = 100
mean_df <- matrix(nrow = k, ncol = 2)
for(thisRun in 1:k){
sam <- data[sample(nrow(data), input$bins), ]
mean_df[thisRun, 1] = mean(sam$vot)
mean_df[thisRun, 2] = sd(sam$vot)
}
mean_df_df = mean_df%>%
as.data.frame() %>%
rename(mean = V1) %>%
rename(sd = V2)
mean_df_df %>%
ggplot(aes(x = mean, y = sd)) +
geom_point(fill = "blue", colour="black",pch=21, size=3) +
xlim(50, 70) +
ylim(15, 25)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(here)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Sampling Error Visualization: within subjects"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Choose n",
min = 1,
max = 100,
value = 20)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
data = read.csv(here("data", "data.csv"))
k = 100
mean_df <- matrix(nrow = k, ncol = 2)
for(thisRun in 1:k){
sam <- data[sample(nrow(data), input$bins), ]
mean_df[thisRun, 1] = mean(sam$vot)
mean_df[thisRun, 2] = sd(sam$vot)
}
mean_df_df = mean_df%>%
as.data.frame() %>%
rename(mean = V1) %>%
rename(sd = V2)
mean_df_df %>%
ggplot(aes(x = mean, y = sd)) +
geom_point(fill = "darkturquoise", colour="black",pch=21, size=3) +
xlim(50, 70) +
ylim(15, 25)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(here)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Sampling Error Visualization: within subjects"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Choose n",
min = 1,
max = 100,
value = 20)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
data = read.csv(here("data", "data.csv"))
k = 100
mean_df <- matrix(nrow = k, ncol = 2)
for(thisRun in 1:k){
sam <- data[sample(nrow(data), input$bins), ]
mean_df[thisRun, 1] = mean(sam$vot)
mean_df[thisRun, 2] = sd(sam$vot)
}
mean_df_df = mean_df%>%
as.data.frame() %>%
rename(mean = V1) %>%
rename(sd = V2)
df = data.frame(Sepal.Width = 5.6, Sepal.Length = 3.9)
mean_df_df %>%
ggplot(aes(x = mean, y = sd)) +
geom_point(fill = "darkturquoise", colour="black",pch=21, size=3) +
xlim(50, 70) +
ylim(15, 25) + geom_point(data = df, col = 'blue')
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(here)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Sampling Error Visualization: within subjects"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Choose n",
min = 1,
max = 100,
value = 20)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
data = read.csv(here("data", "data.csv"))
k = 100
mean_df <- matrix(nrow = k, ncol = 2)
for(thisRun in 1:k){
sam <- data[sample(nrow(data), input$bins), ]
mean_df[thisRun, 1] = mean(sam$vot)
mean_df[thisRun, 2] = sd(sam$vot)
}
mean_df_df = mean_df%>%
as.data.frame() %>%
rename(mean = V1) %>%
rename(sd = V2)
df = data.frame(mean = 60, sd = 20)
mean_df_df %>%
ggplot(aes(x = mean, y = sd)) +
geom_point(fill = "darkturquoise", colour="black",pch=21, size=3) +
xlim(50, 70) +
ylim(15, 25) + geom_point(data = df, color = "red")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(here)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Sampling Error Visualization: within subjects"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Choose n",
min = 1,
max = 100,
value = 20)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
data = read.csv(here("data", "data.csv"))
k = 100
mean_df <- matrix(nrow = k, ncol = 2)
for(thisRun in 1:k){
sam <- data[sample(nrow(data), input$bins), ]
mean_df[thisRun, 1] = mean(sam$vot)
mean_df[thisRun, 2] = sd(sam$vot)
}
mean_df_df = mean_df%>%
as.data.frame() %>%
rename(mean = V1) %>%
rename(sd = V2)
df = data.frame(mean = 60, sd = 20)
mean_df_df %>%
ggplot(aes(x = mean, y = sd)) +
geom_point(fill = "darkturquoise", colour="black",pch=21, size=3) +
xlim(50, 70) +
ylim(15, 25) + geom_point(data = df,
fill = "red",
colour="black",pch=21, size=3)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp('casillas_example.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
mean_u = 10
sd_u = 5
sample_function = function(sampling, number_stim)
{
power_df = matrix(nrow = 1000, ncol= 9)
for (i in 1:1000) {
sample_df = sampling %>%
sample_n(number_stim) %>%
mutate(df = "sample")
data_tost = rbind(sampling, sample_df)
t_e = TOSTER::dataTOSTtwo(
data = data_tost,
deps = "k",
group = "df",
low_eqbound_d = -0.4,
high_eqbound_d = 0.4,
desc = TRUE,
plots = FALSE)
tost = t_e$tost$asDF
desc = t_e$desc$asDF
power_df[i, 1] = min(tost$`p[1]`, tost$`p[2]`) # p value tost
power_df[i, 2] = tost$`p[0]`# p value t-test
power_df[i, 3] = desc$`m[1]`# mean 1 (actual)
power_df[i, 4] = desc$`m[2]`# mean 2 (sample)
power_df[i, 5] = desc$`sd[1]`# sd 1 (actual)
power_df[i, 6] = desc$`sd[2]`# sd 2 (sample)
power_df[i, 7] = desc$`n[1]`# n1 (actual)
power_df[i, 8] = desc$`n[2]`# n2 (sample)
power_df[i, 9] = i # n2 (sample)
}
return(power_df)
}
run_samples = function(sampling_df)
{
five = sample_function(sampling_df, 6) %>%
as.data.frame()
eight = sample_function(sampling_k, 10) %>%
as.data.frame()
ten = sample_function(sampling_k ,12) %>%
as.data.frame()
twelve = sample_function(sampling_k, 15) %>%
as.data.frame()
fifteen = sample_function(sampling_k, 18) %>%
as.data.frame()
final_df = rbind(five, eight, ten, twelve, fifteen)
return(final_df)
}
sampling_df = data.frame(k = rnorm(n = 1000, mean = mean_u, sd = sd_u)) %>%
mutate(df = "sampling")
test_data = run_samples(sampling_df)
sample_function = function(sampling, number_stim)
{
power_df = matrix(nrow = 1000, ncol= 9)
for (i in 1:1000) {
sample_df = sampling %>%
sample_n(number_stim) %>%
mutate(df = "sample")
data_tost = rbind(sampling, sample_df)
t_e = TOSTER::dataTOSTtwo(
data = data_tost,
deps = "k",
group = "df",
low_eqbound_d = -0.4,
high_eqbound_d = 0.4,
desc = TRUE,
plots = FALSE)
tost = t_e$tost$asDF
desc = t_e$desc$asDF
power_df[i, 1] = min(tost$`p[1]`, tost$`p[2]`) # p value tost
power_df[i, 2] = tost$`p[0]`# p value t-test
power_df[i, 3] = desc$`m[1]`# mean 1 (actual)
power_df[i, 4] = desc$`m[2]`# mean 2 (sample)
power_df[i, 5] = desc$`sd[1]`# sd 1 (actual)
power_df[i, 6] = desc$`sd[2]`# sd 2 (sample)
power_df[i, 7] = desc$`n[1]`# n1 (actual)
power_df[i, 8] = desc$`n[2]`# n2 (sample)
power_df[i, 9] = i # n2 (sample)
}
return(power_df)
}
run_samples = function(sampling_df)
{
five = sample_function(sampling_df, 6) %>%
as.data.frame()
eight = sample_function(sampling_df, 10) %>%
as.data.frame()
ten = sample_function(sampling_df ,12) %>%
as.data.frame()
twelve = sample_function(sampling_df, 15) %>%
as.data.frame()
fifteen = sample_function(sampling_df, 18) %>%
as.data.frame()
final_df = rbind(five, eight, ten, twelve, fifteen)
return(final_df)
}
sampling_df = data.frame(k = rnorm(n = 1000, mean = mean_u, sd = sd_u)) %>%
mutate(df = "sampling")
test_data = run_samples(sampling_df)
runApp('app2.R')
es = .4
runApp('app2.R')
## app.R ##
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
actionButton(inputId = "btn_data", label = "Download"),
conditionalPanel(condition = "output.setupComplete",
box( title = "box1" ),
box( title = "box2" ),
box( title = "boc3" )
),
conditionalPanel(condition = "!output.setupComplete",
box( title = "loading"))
)
)
server <- function(input, output) {
rv <- reactiveValues()
rv$setupComplete <- FALSE
## simulate data load
observe({
if(input$btn_data){
df <- data.frame(id = seq(1,200),
val = rnorm(200, 0, 1))
## Simulate the data load
Sys.sleep(5)
## set my condition to TRUE
rv$setupComplete <- TRUE
}
## the conditional panel reads this output
output$setupComplete <- reactive({
return(rv$setupComplete)
})
outputOptions(output, 'setupComplete', suspendWhenHidden=FALSE)
})
}
shinyApp(ui, server)
## app.R ##
library(shiny)
runApp('app_loading.R')
runApp('ex.R')
runApp('ex.R')
n = 200
sd
sd
sd_u = 5
mean_u = 10
df = rnorm(n = n, mean = mean_u, sd = sd_u)
df = rnorm(n = n, mean = mean_u, sd = sd_u)
rnorm(n = n_u, mean = mean_u, sd = sd_u)
rnorm(n = n_u, mean = mean_u, sd = sd_u)
n_u = 5
rnorm(n = n_u, mean = mean_u, sd = sd_u)
rnorm(n = n_u, mean = mean_u, sd = sd_u)
df = rnorm(n = n_u, mean = mean_u, sd = sd_u)
plot(df)
}
runApp('ex.R')
library(shiny)
library(tidyverse)
library(here)
?shiny
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sample_function = function(sampling, number_stim)
{
power_df = matrix(nrow = 1000, ncol= 9)
for (i in 1:1000) {
sample_df = sampling %>%
sample_n(number_stim) %>%
mutate(df = "sample")
data_tost = rbind(sampling, sample_df)
t_e = TOSTER::dataTOSTtwo(
data = data_tost,
deps = "k",
group = "df",
low_eqbound_d = -.4,
high_eqbound_d = .4,
desc = TRUE,
plots = FALSE)
tost = t_e$tost$asDF
desc = t_e$desc$asDF
power_df[i, 1] = min(tost$`p[1]`, tost$`p[2]`) # p value tost
power_df[i, 2] = tost$`p[0]`# p value t-test
power_df[i, 3] = desc$`m[1]`# mean 1 (actual)
power_df[i, 4] = desc$`m[2]`# mean 2 (sample)
power_df[i, 5] = desc$`sd[1]`# sd 1 (actual)
power_df[i, 6] = desc$`sd[2]`# sd 2 (sample)
power_df[i, 7] = desc$`n[1]`# n1 (actual)
power_df[i, 8] = desc$`n[2]`# n2 (sample)
power_df[i, 9] = i # n2 (sample)
}
return(power_df)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
