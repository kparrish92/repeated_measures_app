library(shiny)
library(tidyverse)
library(here)

# Define UI for app that draws a histogram ----
ui <- fluidPage(
  
  # App title ----
  titlePanel("Repeated Measures Power Analysis: How many Tokens are needed?"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    sidebarPanel(
      numericInput(inputId = "mean_u",
                  label = "Type mean",
                  min = 0,
                  max = 10000,
                  value = 65),
      numericInput(inputId = "sd_u",
                   label = "Type SD",
                   min = 0,
                   max = 10000,
                   value = 65),
      numericInput(inputId = "eq",
                   label = "Choose Equivalence Bounds",
                   min = 0,
                   max = 10000,
                   value = .4),
      
    ),
   
    
    # Main panel for displaying outputs ----
    mainPanel(
      
      # Output: Histogram ----
      plotOutput(outputId = "distPlot")
      
    )
  )
)

# Define server l ogic required to draw a histogram ----
server <- function(input, output) {
  
  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({

      sampling = data.frame(k = rnorm(n = 1000, 
                                      mean = input$mean_u, 
                                      sd = input$sd_u)) %>%
        mutate(df = "sampling")
      
      
        
      sample_function = function(sampling, number_stim)
      {
        power_df = matrix(nrow = 1000, ncol= 9)
        
        
        for (i in 1:1000) {
          
          sample_df = sampling %>%
            sample_n(number_stim) %>%
            mutate(df = "sample")
          
          data_tost = rbind(sampling, sample_df)
          
          t_e = TOSTER::dataTOSTtwo(
            data = data_tost,
            deps = "k",
            group = "df",
            low_eqbound_d = input$eq,
            high_eqbound_d = input$eq,
            desc = TRUE,
            plots = FALSE)
          
          tost = t_e$tost$asDF
          desc = t_e$desc$asDF
          
          power_df[i, 1] = min(tost$`p[1]`, tost$`p[2]`) # p value tost
          power_df[i, 2] = tost$`p[0]`# p value t-test
          power_df[i, 3] = desc$`m[1]`# mean 1 (actual)
          power_df[i, 4] = desc$`m[2]`# mean 2 (sample)
          power_df[i, 5] = desc$`sd[1]`# sd 1 (actual)
          power_df[i, 6] = desc$`sd[2]`# sd 2 (sample)
          power_df[i, 7] = desc$`n[1]`# n1 (actual)
          power_df[i, 8] = desc$`n[2]`# n2 (sample)
          power_df[i, 9] = i # n2 (sample)
          
          
        }
        return(power_df)
      }
      
      sample_df = sample_function(sampling, number_stim) %>%
        as.data.frame() %>% 
        rename("tost" = V1,
               "t_test" = V2,
               "mean_actual" = V3,
               "mean_sample" = V4,
               "sd_actual" = V5,
               "sd_sample" = V6,
               "n_actual" = V7,
               "n_sample" = V8,
               "iteration" = V9) %>%
        mutate(sig_tost = case_when(
          tost < .05 ~ 1,
          tost > .05 ~ 0,
        )) %>%
        mutate(sig_ttest = case_when(
          t_test < .05 ~ 1,
          t_test > .05 ~ 0,
        )) %>%
        mutate(tost = round(as.numeric(tost), digits = 3)) %>%
        mutate(t_test = round(as.numeric(tost), digits = 3)) %>%
        mutate(mean_difference = round(as.numeric(mean_actual) -
                                         as.numeric(mean_sample), digits = 3)) %>%
        mutate(participant = rep(1:10, each = 10, 10))
    
      plot = sample_df %>% 
        group_by(participant, n_actual) %>%
        summarize(n = sum(sig_tost)) 
      
      plot %>% 
        ggplot(aes(y = as.factor(n_actual), x = n)) + geom_boxplot() +
        geom_vline(xintercept = 80)
      
      
      
      
  })
}


# Create Shiny app ----
shinyApp(ui = ui, server = server)
